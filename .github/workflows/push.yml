name: CI Push to DockerHub

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'pom.xml'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Extract version from pom.xml
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Full version: $VERSION"
          BASE_VERSION=${VERSION/-SNAPSHOT/}
          echo "VERSION=$BASE_VERSION" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git checkout -b release-${{ steps.get_version.outputs.VERSION }}
          sed -i 's/-SNAPSHOT//' pom.xml
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "Release version ${{ steps.get_version.outputs.VERSION }}"
          git push origin release-${{ steps.get_version.outputs.VERSION }}

      - name: Create and merge PR
        uses: peter-evans/create-pull-request@v5
        with:
          branch: release-${{ steps.get_version.outputs.VERSION }}
          title: "Release version ${{ steps.get_version.outputs.VERSION }}"
          body: "Auto-created release PR"
          commit-message: "Release version ${{ steps.get_version.outputs.VERSION }}"
          delete-branch: true
          merge-method: squash
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: mvn test

      - name: Build Docker image
        run: |
          mvn spring-boot:build-image -DskipTests \
            -Dspring-boot.build-image.imageName=${{ secrets.DOCKERHUB_USERNAME }}/posts:${{ steps.get_version.outputs.VERSION }}

      - name: Docker login
        run: docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/posts:${{ steps.get_version.outputs.VERSION }}

      - name: Check image was pushed
        run: |
          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/posts:${{ steps.get_version.outputs.VERSION }} > /dev/null \
            && echo "Image exists." \
            || (echo "Image NOT found!" && exit 1)
